{"version":3,"sources":["theme/theme.js","components/ClipInput.jsx","api/uploadfile.js","api/graphql_api.js","components/auth.jsx","utils/filecrypt.js","components/UploadBox.jsx","pages/SecureSharePage.jsx","App.js","index.js"],"names":["theme","extendTheme","styles","global","fontSize","colors","darkpurple","50","100","200","300","400","500","600","700","800","900","config","initialColorMode","useSystemColorMode","ClipInput","value","useClipboard","hasCopied","onCopy","mb","isReadOnly","placeholder","onClick","ml","width","url","file","cancel","a","axios","put","cancelToken","token","headers","type","UploadFile","graphQLClient","GraphQLClient","getAccessToken","localStorage","getItem","request","query","variables","nthTry","requestHeaders","authorization","data","response","errors","length","extensions","code","message","AuthContext","createContext","UserInfoQuery","gql","AuthProvider","children","queryClient","useQueryClient","useQuery","retry","isLoading","refetch","isFetching","loggedOut","v1_iam_IAM_UserProfile","user","username","logout","useCallback","removeItem","clear","loginRootMutation","login","email","password","accountid","res","status","invalidateQueries","useMemo","isAuthenticated","revalidate","Provider","readfile","Promise","resolve","reject","fr","FileReader","onload","result","readAsArrayBuffer","Encrypt","key","plaintextbytes","plaintextbyteArray","Uint8Array","pbkdf2iterations","passphrasebytes","TextEncoder","encode","pbkdf2salt","window","crypto","getRandomValues","subtle","importKey","name","passphrasekey","deriveBits","salt","iterations","hash","pbkdf2bytes","pbkdf2bytesArray","keybytes","slice","ivbytes","aeskey","encrypt","iv","cipherbytes","cipherbytesArray","resultbytes","set","blob","Blob","console","log","UploadBox","setFieldValue","values","encryptionKey","useDropzone","onDrop","acceptedFs","fila","e","enBlob","File","getRootProps","getInputProps","cursor","display","minHeight","overflowY","alignItems","justifyContent","borderWidth","p","borderRadius","borderColor","borderStyle","css","flexDirection","as","FaCloudUploadAlt","boxSize","color","textAlign","fontWeight","textTransform","spacing","mt","map","variant","colorScheme","size","filesize","filter","f","leftIcon","createShareMut","SecureSharePage","useContext","useState","cliplink","setCliplink","baseDate","Date","toast","useToast","startDate","startOfDay","subDays","endDate","endOfDay","range","setRange","popM","useDisclosure","_token","popsize","useBreakpointValue","base","lg","displayMobile","displayDesktop","genKey","setgenKey","useEffect","nanoid","createShareMutation","useMutation","input","flex","enableReinitialize","initialValues","files","clickAllowed","onSubmit","resetForm","encrypted","CryptoJS","AES","toString","filen","v","mutateAsync","accountId","toISOString","encryptedData","fileNames","fileToUpload","secureshare_SecureShare_Create","all","val","location","host","uuid","title","description","duration","isClosable","position","isSubmitting","handleChange","style","required","onChange","md","maxWidth","matchWidth","placement","isOpen","onClose","tabIndex","role","aria-label","onOpen","mr","format","editableDateInputs","item","selection","moveRangeOnFirstSelection","ranges","showSelectionPreview","months","direction","d","htmlFor","min","s","n","event","target","setItem","reload","QueryClient","App","client","resetCSS","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39f32f36.chunk.js","sourcesContent":["// 1. import `extendTheme` function\nimport { extendTheme } from '@chakra-ui/react';\nimport { mode } from '@chakra-ui/theme-tools';\n\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n};\n\n// const accessibleColorMap = {\n//   yellow: {\n//     bg: 'yellow.400',\n//     color: 'black',\n//     hoverBg: 'yellow.500',\n//     activeBg: 'yellow.600',\n//   },\n//   cyan: {\n//     bg: 'cyan.400',\n//     color: 'black',\n//     hoverBg: 'cyan.500',\n//     activeBg: 'cyan.600',\n//   },\n// };\n\n// const variantdarkSolidDark = (props) => {\n//   const { colorScheme: c } = props;\n\n//   if (c === 'gray') {\n//     const bg = mode(`gray.100`, `whiteAlpha.200`)(props);\n\n//     return {\n//       bg,\n//       _hover: {\n//         bg: mode(`gray.200`, `whiteAlpha.300`)(props),\n//         _disabled: {\n//           bg,\n//         },\n//       },\n//       _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) },\n//     };\n//   }\n\n//   const {\n//     bg = `${c}.800`,\n//     color = 'white',\n//     hoverBg = `${c}.700`,\n//     activeBg = `${c}.700`,\n//   } = accessibleColorMap[c] ?? {};\n\n//   const background = mode(bg, `${c}.200`)(props);\n\n//   return {\n//     bg: background,\n//     color: mode(color, `gray.800`)(props),\n//     _hover: {\n//       bg: mode(hoverBg, `${c}.300`)(props),\n//       _disabled: {\n//         bg: background,\n//       },\n//     },\n//     _active: { bg: mode(activeBg, `${c}.400`)(props) },\n//   };\n// };\n\nconst theme = extendTheme({\n  // components: {\n  //   Button: {\n  //     variants: {\n  //       'solid-dark': variantdarkSolidDark,\n  //     },\n  //   },\n  // },\n  styles: {\n    global: {\n      'html, body': {\n        fontSize: '16px',\n      },\n    },\n  },\n  colors: {\n    darkpurple: {\n      50: '#efedfc',\n      100: '#cfcbe7',\n      200: '#afa8d4',\n      300: '#8f85c3',\n      400: '#7064b2',\n      500: '#574a98',\n      600: '#443a77',\n      700: '#302955',\n      800: '#1d1834',\n      900: '#0b0715',\n    },\n  },\n  // fonts: {\n  //   body: 'Roboto',\n  //   heading: 'Ubuntu',\n  // },\n  config,\n});\n\nexport default theme;\n","import React, { Component }  from 'react';\nimport {\n  Flex,\n  Button,\n  useClipboard,\n  Editable,\n  EditablePreview,\n  EditableInput,\n  Input,\n} from '@chakra-ui/react';\n\nconst ClipInput = ({ value }) => {\n  const { hasCopied, onCopy } = useClipboard(value);\n\n  return (\n    <>\n      <Flex mb={2}>\n        <Input value={value} isReadOnly placeholder=\"Welcome\" />\n        <Button onClick={onCopy} ml={2}>\n          {hasCopied ? 'Copied' : 'Copy'}\n        </Button>\n      </Flex>\n      <Editable isReadOnly>\n        <EditablePreview width=\"100%\" />\n        <EditableInput />\n      </Editable>\n    </>\n  );\n};\n\nexport default ClipInput;\n","import axios from 'axios';\n\nexport async function UploadFile(url, file, cancel) {\n  return axios.put(url, file, {\n    cancelToken: cancel && cancel.token,\n    headers: {\n      'Content-Type': file?.type,\n    },\n  });\n}\n\nexport default UploadFile;\n","import { GraphQLClient } from 'graphql-request';\n// import { RefreshUser } from './user';\n\n// const urls = {\n//   test: `https://graphql.dev.defencestation.ca`,\n//   development: import.meta.env.PUBLIC_API || 'http://localhost:3000/graphql',\n//   production: window?._env_?.GRAPH_API,\n// };\n\nconst graphQLClient = new GraphQLClient('https://graphql.dev.defencestation.ca/graphql');\n\n/**\n * @param promise A promise to resolve\n * @nthTry Number of tries before rejecting\n * @desc Retries a promise n no. of times before rejecting.\n * @returns resolved promise\n */\nasync function retryPromise(promise, nthTry) {\n  try {\n    // try to resolve the promise\n    const data = await promise;\n    // if resolved simply return the result back to the caller\n    return data;\n  } catch (e) {\n    // if the promise fails and we are down to 1 try we reject\n    if (nthTry === 1) {\n      return Promise.reject(e);\n    }\n    // if the promise fails and the current try is not equal to 1\n    // we call this function again from itself but this time\n    // we reduce the no. of tries by one\n    // so that eventually we reach to \"1 try left\" where we know we have to stop and reject\n    // console.log('retrying', nthTry, 'time');\n    // we return whatever is the result of calling the same function\n    return retryPromise(promise, nthTry - 1);\n  }\n}\n\n// Obtain the fresh token each time the function is called\nfunction getAccessToken() {\n  return localStorage.getItem('access-token');\n}\n\nconst request = async (query, variables, nthTry = 2) => {\n  // console.log(nthTry);\n  let requestHeaders = {};\n\n\n  // if (!import.meta.env.MODE || import.meta.env.MODE === 'development') {\n  if (getAccessToken()) {\n    requestHeaders = {\n      authorization: `${getAccessToken()}`,\n    };\n    // }\n  }\n\n  try {\n    const data = await graphQLClient.request(query, variables, requestHeaders);\n    return data;\n  } catch (error) {\n    if (nthTry !== 1) {\n      if (error?.response?.errors?.length > 0) {\n        if (\n          error?.response?.errors[0].extensions?.code === 'unauthenticated' &&\n          error?.response?.errors[0].message === 'jwt: exp claim is invalid'\n        ) {\n          // console.log(error?.response?.errors[0].extensions);\n\n          // const atk = localStorage.getItem('access-token');\n          // const rtk = localStorage.getItem('refresh-token');\n\n          try {\n            // if (\n            //   !import.meta.env.MODE ||\n            //   import.meta.env.MODE === 'development'\n            // ) {\n            // const newtokens = await RefreshUser(atk, rtk);\n            // localStorage.setItem('access-token', newtokens.data.atoken);\n            // localStorage.setItem('refresh-token', newtokens.data.rtoken);\n          } catch (e) {\n            // console.log(e);\n          }\n\n          // lets send a request to refresh the token\n        }\n\n        return request(query, variables, nthTry - 1);\n      }\n    }\n\n    throw error;\n  }\n};\n\nexport { graphQLClient, request };\n","import React, { createContext, useContext, useMemo, useCallback } from 'react';\n\nimport { useQueryClient, useQuery } from 'react-query';\n\nimport { gql } from 'graphql-request';\nimport { request } from '../api/graphql_api';\n\nconst AuthContext = createContext({});\n\nconst UserInfoQuery = gql`\n  mutation MyMutation {\n    v1_iam_IAM_UserProfile {\n      user {\n        accountId\n        companyInfoSet\n        email\n        createdAt\n        emailVerified\n        firstName\n        lastName\n        permissions\n        resetOnLogin\n        type\n        updatedAt\n        username\n      }\n    }\n  }\n`;\n\nexport const AuthProvider = ({ children }) => {\n  const queryClient = useQueryClient();\n\n  const { data, isLoading, refetch, isFetching } = useQuery(\n    'userinfo',\n    () => request(UserInfoQuery),\n    {\n      retry: false,\n    },\n  );\n\n\n\n  const loggedOut = !isLoading && !data?.v1_iam_IAM_UserProfile?.user?.username;\n\n  const logout = useCallback(async () => {\n    try {\n      // await LogoutUser();\n\n      // if (!import.meta.env.MODE || import.meta.env.MODE === 'development') {\n      localStorage.removeItem('access-token');\n      // localStorage.removeItem('refresh-token');\n      // }\n\n      queryClient.clear();\n      // refetch();\n\n      return null;\n    } catch (e) {\n      return e;\n    }\n  }, [queryClient]);\n\n  const loginRootMutation = gql`\n    mutation MyMutation(\n      $email: String!\n      $password: String!\n      $accountid: String!\n      $username: String!\n    ) {\n      v1_authn_Authn_Login(\n        input: {\n          email: $email\n          password: $password\n          accountid: $accountid\n          username: $username\n        }\n      ) {\n        authToken\n        user {\n          accountid\n          companyInfoSet\n          emailVerified\n          firstName\n          lastName\n          type\n          username\n        }\n      }\n    }\n  `;\n\n  const login = useCallback(\n    async (email, password) => {\n      try {\n        const res = await request(loginRootMutation, {\n          email,\n          password,\n          accountid: 'abc',\n          username: 'abc',\n        });\n\n        if (res.status === 200) {\n          queryClient.invalidateQueries('userinfo');\n        }\n\n        return res;\n      } catch (e) {\n        if (e.response) {\n          throw e;\n        }\n        throw e;\n      }\n    },\n    [loginRootMutation, queryClient],\n  );\n\n\n\n  const value = useMemo(\n    () => ({\n      isAuthenticated: !!data?.v1_iam_IAM_UserProfile?.user?.username,\n      user: data?.v1_iam_IAM_UserProfile?.user,\n      isFetching,\n      isLoading,\n      logout,\n      login,\n      loggedOut,\n      refetch,\n      revalidate: () => queryClient.invalidateQueries('userinfo'),\n    }),\n    [\n      loggedOut,\n      login,\n      logout,\n      queryClient,\n      data?.v1_iam_IAM_UserProfile?.user,\n      isFetching,\n      isLoading,\n      refetch,\n    ],\n  );\n\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => useContext(AuthContext);\n\n// revalidate: () => queryClient.invalidateQueries('userinfo'),\n","const readfile = (file) => {\n  return new Promise((resolve, reject) => {\n    const fr = new FileReader();\n    fr.onload = () => {\n      resolve(fr.result);\n    };\n    fr.readAsArrayBuffer(file);\n  });\n};\n\nexport const Encrypt = async (key, file) => {\n  try {\n    const plaintextbytes = await readfile(file);\n\n    const plaintextbyteArray = new Uint8Array(plaintextbytes);\n\n    const pbkdf2iterations = 10000;\n    const passphrasebytes = new TextEncoder('utf-8').encode(key);\n    const pbkdf2salt = window.crypto.getRandomValues(new Uint8Array(8));\n\n    const passphrasekey = await window.crypto.subtle.importKey(\n      'raw',\n      passphrasebytes,\n      { name: 'PBKDF2' },\n      false,\n      ['deriveBits'],\n    );\n\n    const pbkdf2bytes = await window.crypto.subtle.deriveBits(\n      {\n        name: 'PBKDF2',\n        salt: pbkdf2salt,\n        iterations: pbkdf2iterations,\n        hash: 'SHA-256',\n      },\n      passphrasekey,\n      384,\n    );\n\n    //   console.log('pbkdf2bytes derived');\n    const pbkdf2bytesArray = new Uint8Array(pbkdf2bytes);\n\n    const keybytes = pbkdf2bytesArray.slice(0, 32);\n    const ivbytes = pbkdf2bytesArray.slice(32);\n\n    const aeskey = await window.crypto.subtle.importKey(\n      'raw',\n      keybytes,\n      { name: 'AES-CBC', length: 256 },\n      false,\n      ['encrypt'],\n    );\n\n    const cipherbytes = await window.crypto.subtle.encrypt(\n      { name: 'AES-CBC', iv: ivbytes },\n      aeskey,\n      plaintextbyteArray,\n    );\n\n    if (!cipherbytes) {\n      // TODO: return error for crypt probs\n      // spnEncstatus.classList.add('redspan');\n      // spnEncstatus.innerHTML = '<p>Error encrypting file.  See console log.</p>';\n    }\n\n    const cipherbytesArray = new Uint8Array(cipherbytes);\n\n    const resultbytes = new Uint8Array(cipherbytesArray.length + 16);\n    resultbytes.set(new TextEncoder('utf-8').encode('Salted__'));\n    resultbytes.set(pbkdf2salt, 8);\n    resultbytes.set(cipherbytesArray, 16);\n\n    const blob = new Blob([resultbytes]);\n\n    return blob;\n  } catch (err) {\n    console.log('encrypt error');\n    throw err;\n  }\n};\nexport const Decrypt = async (key, file) => {\n  try {\n    const cipherbytes = await readfile(file);\n\n    const plaintextbyteArray = new Uint8Array(cipherbytes);\n\n    const pbkdf2iterations = 10000;\n    const passphrasebytes = new TextEncoder('utf-8').encode(key);\n    const pbkdf2salt = plaintextbyteArray.slice(8, 16);\n\n    const passphrasekey = await window.crypto.subtle.importKey(\n      'raw',\n      passphrasebytes,\n      { name: 'PBKDF2' },\n      false,\n      ['deriveBits'],\n    );\n\n    const pbkdf2bytes = await window.crypto.subtle.deriveBits(\n      {\n        name: 'PBKDF2',\n        salt: pbkdf2salt,\n        iterations: pbkdf2iterations,\n        hash: 'SHA-256',\n      },\n      passphrasekey,\n      384,\n    );\n\n    const pbkdf2bytesArrays = new Uint8Array(pbkdf2bytes);\n\n    const keybytes = pbkdf2bytesArrays.slice(0, 32);\n    const ivbytes = pbkdf2bytesArrays.slice(32);\n    const cipherbyteData = plaintextbyteArray.slice(16);\n\n    const aeskey = await window.crypto.subtle.importKey(\n      'raw',\n      keybytes,\n      { name: 'AES-CBC', length: 256 },\n      false,\n      ['decrypt'],\n    );\n\n    const plaintextbytes = await window.crypto.subtle.decrypt(\n      { name: 'AES-CBC', iv: ivbytes },\n      aeskey,\n      cipherbyteData,\n    );\n\n    const plaintextArray = new Uint8Array(plaintextbytes);\n\n    const blob = new Blob([plaintextArray]);\n\n    return blob;\n  } catch (err) {\n    console.log('decryption error');\n    console.log(err);\n    throw err;\n  }\n};\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { FaCloudUploadAlt } from 'react-icons/fa';\nimport {\n  Box,\n  Flex,\n  Text,\n  Button,\n  Stack,\n  TagCloseButton,\n  Tag,\n  TagLabel,\n  Icon,\n} from '@chakra-ui/react';\nimport filesize from 'filesize';\n\nimport { Encrypt } from '../utils/filecrypt';\n\nconst UploadBox = ({\n  setFieldValue,\n  values,\n  name,\n  encryptionKey = 'hello',\n}) => {\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: useCallback(\n      async (acceptedFs) => {\n        let fila = [...values[name]];\n\n        // acceptedFs.forEach((e) => {\n        //   fila = fila.filter((f) => e.name !== f.name);\n        // });\n\n        for (const e of acceptedFs) {\n          console.log('accepted files');\n          console.log(e);\n          const enBlob = await Encrypt(encryptionKey, e);\n          const file = new File([enBlob], e.name, {\n            type: enBlob.type,\n          });\n\n          fila = [...fila, ...[file]];\n        }\n\n        // console.log('accepted', acceptedFs);\n\n        // console.log('fila', fila);\n        setFieldValue('files', fila);\n      },\n      [name, setFieldValue, values, encryptionKey],\n    ),\n  });\n\n  return (\n    <>\n      {values[name]?.length === 0 && (\n        <Box\n          {...getRootProps()}\n          mb={4}\n          cursor=\"pointer\"\n          display=\"flex\"\n          minHeight={100}\n          overflowY=\"auto\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderWidth={2}\n          p={5}\n          borderRadius=\"lg\"\n          borderColor=\"blue.600\"\n          borderStyle=\"dashed\"\n          css={{\n            '::-webkit-scrollbar': {\n              width: '0px' /* Remove scrollbar space */,\n            },\n          }}\n        >\n          <input {...getInputProps()} />\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Icon as={FaCloudUploadAlt} boxSize=\"3em\" color=\"blue.600\" mb={2} />\n\n            <Text\n              textAlign=\"center\"\n              color=\"blue.600\"\n              fontWeight=\"medium\"\n              textTransform=\"uppercase\"\n            >\n              Click or Drag &apos;n&apos; Drop Files\n            </Text>\n          </Flex>\n        </Box>\n      )}\n\n      {values[name]?.length > 0 && (\n        <Stack spacing={4} mt={2} mb={4}>\n          {values[name]?.map((file) => (\n            <Tag key={file.name} variant=\"outline\" colorScheme=\"blue\" size=\"lg\">\n              <TagLabel>\n                {file.name} - {filesize(file.size)}\n              </TagLabel>\n              <TagCloseButton\n                color=\"red.800\"\n                ml=\"auto\"\n                onClick={() => {\n                  const fila = values[name]?.filter(\n                    (f) => file.name !== f.name,\n                  );\n                  setFieldValue(name, fila);\n                }}\n              />\n            </Tag>\n          ))}\n\n          <Box>\n            <Button\n              leftIcon={<Icon as={FaCloudUploadAlt} />}\n              {...getRootProps()}\n              colorScheme=\"blue.700\"\n              variant=\"outline\"\n            >\n              <input {...getInputProps()} />\n              Add More Files\n            </Button>\n          </Box>\n        </Stack>\n      )}\n    </>\n  );\n};\n\nexport default UploadBox;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Textarea,\n  Flex,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  useBreakpointValue,\n  Stack,\n  Text,\n  useDisclosure,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverFooter,\n  Button,\n  useToast,\n  Box,\n  Heading,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n} from '@chakra-ui/react';\nimport { Formik, Form } from 'formik';\nimport CryptoJS from 'crypto-js';\nimport { gql } from 'graphql-request';\nimport { useMutation } from 'react-query';\n\nimport { nanoid } from 'nanoid';\nimport { endOfDay, startOfDay, subDays, format } from 'date-fns';\n// import { format as zonedFormat, utcToZonedTime } from 'date-fns-tz';\nimport { DateRangePicker, DateRange } from 'react-date-range';\nimport ClipInput from '../components/ClipInput';\nimport UploadFile from '../api/uploadfile';\nimport { useAuth } from '../components/auth';\nimport UploadBox from '../components/UploadBox';\nimport { request } from '../api/graphql_api';\n\nconst createShareMut = gql`\n  mutation MyMutation(\n    $accountId: String = \"\"\n    $clickAllowed: Int = 10\n    $endDate: String = \"\"\n    $fileNames: [String]!\n    $startDate: String = \"\"\n    $encryptedData: String = \"\"\n    $username: String = \"\"\n  ) {\n    v1_secureshare_SecureShare_Create(\n      input: {\n        accountId: $accountId\n        clickAllowed: $clickAllowed\n        endDate: $endDate\n        fileNames: $fileNames\n        startDate: $startDate\n        encryptedData: $encryptedData\n        username: $username\n      }\n    ) {\n      files {\n        name\n        url\n      }\n      uuid\n    }\n  }\n`;\n\nconst SecureSharePage = () => {\n  const { user } = useAuth();\n\n\n  const [cliplink, setCliplink] = useState('');\n\n  const baseDate = new Date();\n  const toast = useToast();\n  const [range, setRange] = useState([\n    {\n      startDate: startOfDay(subDays(baseDate, 15)),\n      endDate: endOfDay(baseDate),\n      key: 'selection',\n    },\n  ]);\n  const popM = useDisclosure();\n  let _token = '';\n\n  function handleChangeToken(event) {\n    console.log(event.target.value);\n    _token = event.target.value\n  }\n\n  function setAuthToken(){\n    localStorage.setItem('access-token',_token)\n    window.location.reload();\n  }\n\n  const popsize = useBreakpointValue({ base: null, lg: 'auto' });\n\n  const displayMobile = useBreakpointValue({ base: true, lg: false });\n  const displayDesktop = useBreakpointValue({ base: false, lg: true });\n\n  // const formatedData = graphData?.map((v) => {\n  //   const datez = new Date(v.time);\n  //   const timeZone = 'Europe/Berlin';\n  //   const zonedDate = utcToZonedTime(datez, timeZone);\n  //   return {\n  //     count: v.count,\n  //     time: zonedFormat(zonedDate, 'MM/dd/yyyy', {\n  //       timeZone: 'UTC',\n  //     }),\n  //   };\n  // });\n\n  const [genKey, setgenKey] = useState('');\n\n  useEffect(() => {\n    setgenKey(nanoid());\n    return () => {};\n  }, []);\n\n  const createShareMutation = useMutation((input) =>\n    request(createShareMut, input),\n  );\n\n  return (\n    <Box flex={1}>\n      <Box mb={10}>\n        <Heading color=\"green.800\">SecureShare</Heading>\n        <Text color=\"gray.700\">Share your data securely</Text>\n      </Box>\n\n      {\n      user ? <Formik\n        enableReinitialize\n        initialValues={{\n          data: '',\n          files: [],\n          clickAllowed: 12,\n        }}\n        onSubmit={async (values, { resetForm }) => {\n          try {\n            const encrypted = CryptoJS.AES.encrypt(\n              values.data,\n              genKey,\n            ).toString();\n\n            const filen = values.files.map((v) => v.name);\n\n            const data = await createShareMutation.mutateAsync({\n              accountId: user.accountId,\n              clickAllowed: values.clickAllowed,\n              endDate: range[0]?.endDate?.toISOString(),\n              startDate: range[0]?.startDate?.toISOString(),\n              username: user.username,\n              encryptedData: encrypted,\n              fileNames: filen,\n            });\n\n            const fileToUpload = data?.secureshare_SecureShare_Create?.files;\n\n            if (fileToUpload) {\n              await Promise.all(\n                fileToUpload.map(async (f) => {\n                  const val = values.files.filter((v) => f.name === v.name);\n\n                  await UploadFile(f.url, val[0], null);\n                }),\n              );\n            }\n\n            setCliplink(\n              `http://${window?.location?.host}/app/secure/${data?.secureshare_SecureShare_Create?.uuid}/${genKey}`,\n            );\n\n            toast({\n              title: 'File encrypted',\n              description: 'Files Added',\n              status: 'success',\n              duration: 3000,\n              isClosable: true,\n              position: 'top',\n            });\n          } catch (e) {\n            if (e.response) {\n              toast({\n                title: 'Response Error',\n                description: e?.response?.errors[0]?.message,\n                status: 'error',\n                duration: 4000,\n                isClosable: true,\n                position: 'top',\n              });\n\n              return;\n            }\n\n            toast({\n              title: 'Application Error',\n              description: e.message,\n              status: 'error',\n              duration: 4000,\n              isClosable: true,\n              position: 'top',\n            });\n          }\n        }}>\n        {({ values, isSubmitting, setFieldValue, handleChange }) => (\n          <Form style={{ width: '100%' }}>\n            <Heading size=\"md\" mb={4}>\n              Encrypt a message\n            </Heading>\n            <Textarea\n              required\n              name=\"data\"\n              value={values.data}\n              placeholder=\"Place a message to encrypt here\"\n              onChange={handleChange}\n            />\n\n            <Stack\n              mt={4}\n              flexDirection={{ base: 'column', md: 'row' }}\n              justifyContent=\"space-between\"\n            >\n              <FormControl maxWidth={300}>\n                <FormLabel>Select Access Date Range</FormLabel>\n                <Stack spacing={2}>\n                  <Popover\n                    matchWidth\n                    placement=\"bottom-end\"\n                    isOpen={popM.isOpen}\n                    onClose={popM.onClose}\n                  >\n                    <PopoverTrigger>\n                      <Flex\n                        flexDirection={{ base: 'row', lg: 'row' }}\n                        tabIndex=\"0\"\n                        role=\"button\"\n                        aria-label=\"Date Range\"\n                        p={2}\n                        borderWidth={2}\n                        borderRadius=\"lg\"\n                        onClick={popM.onOpen}\n                        variant=\"outline\"\n                      >\n                        <Text mr={2} color=\"green.800\" fontWeight=\"bold\">\n                          {format(range[0].startDate, 'MM/dd/yyyy')}\n                        </Text>\n                        <Text mr={2}>to</Text>\n                        <Text color=\"green.800\" fontWeight=\"bold\">\n                          {format(range[0].endDate, 'MM/dd/yyyy')}\n                        </Text>\n                      </Flex>\n                    </PopoverTrigger>\n                    <PopoverContent width={popsize}>\n                      <PopoverArrow />\n                      <PopoverCloseButton />\n                      <PopoverHeader>Date Range</PopoverHeader>\n                      <PopoverBody>\n                        {displayMobile && (\n                          <DateRange\n                            editableDateInputs\n                            onChange={(item) => {\n                              item.selection.startDate = startOfDay(\n                                item.selection.startDate,\n                              );\n\n                              item.selection.endDate = endOfDay(\n                                item.selection.endDate,\n                              );\n\n                              setRange([item.selection]);\n                            }}\n                            moveRangeOnFirstSelection={false}\n                            ranges={range}\n                          />\n                        )}\n                        {displayDesktop && (\n                          <DateRangePicker\n                            editableDateInputs\n                            onChange={(item) => {\n                              item.selection.startDate = startOfDay(\n                                item.selection.startDate,\n                              );\n\n                              item.selection.endDate = endOfDay(\n                                item.selection.endDate,\n                              );\n\n                              setRange([item.selection]);\n                            }}\n                            showSelectionPreview\n                            moveRangeOnFirstSelection={false}\n                            months={1}\n                            ranges={range}\n                            direction=\"horizontal\"\n                          />\n                        )}\n                      </PopoverBody>\n                      <PopoverFooter d=\"flex\" justifyContent=\"flex-end\">\n                        <Button\n                          colorScheme=\"blue\"\n                          onClick={() => {\n                            popM.onClose();\n                            // analytics.refetch();\n                          }}\n                        >\n                          Apply\n                        </Button>\n                      </PopoverFooter>\n                    </PopoverContent>\n                  </Popover>\n                </Stack>\n                <FormHelperText>\n                  Choose when you want message to be accessed\n                </FormHelperText>\n              </FormControl>\n\n              <FormControl maxWidth={300} ml=\"auto\">\n                <FormLabel htmlFor=\"email\">Allowed Opens</FormLabel>\n                <NumberInput\n                  min={1}\n                  required\n                  onChange={(s, n) => {\n                    setFieldValue('clickAllowed', n);\n                  }}\n                  value={values.clickAllowed}\n                >\n                  <NumberInputField />\n                  <NumberInputStepper>\n                    <NumberIncrementStepper />\n                    <NumberDecrementStepper />\n                  </NumberInputStepper>\n                </NumberInput>\n                <FormHelperText>\n                  The amount of time the message can be accessed\n                </FormHelperText>\n              </FormControl>\n            </Stack>\n\n            <Box mt={4}>\n              <UploadBox\n                name=\"files\"\n                setFieldValue={setFieldValue}\n                values={values}\n                encryptionKey={genKey}\n              />\n\n              {cliplink && <ClipInput value={cliplink} />}\n\n              <Flex justifyContent=\"center\">\n                <Button\n                  size=\"lg\"\n                  colorScheme=\"blue\"\n                  mr={3}\n                  type=\"submit\"\n                  isLoading={isSubmitting}\n                >\n                  Encrypt\n                </Button>\n              </Flex>\n            </Box>\n          </Form>\n        )}\n      </Formik>\n      :\n      <div>\n      <h1> Enter Token </h1>\n\n      <Textarea\n        placeholder=\"Enter Token\"\n        onChange={handleChangeToken}> </Textarea>\n\n        <br/>  \n        <Button\n          size=\"lg\"\n          colorScheme=\"blue\"\n          mr={3}\n          onClick={setAuthToken}\n        >\n          Login\n        </Button>\n\n\n\n       </div>\n      }\n    </Box>\n  );\n};\n\nexport default SecureSharePage;\n\n// {JSON.stringify(values)}\n// {`start : ${range[0]?.startDate?.toISOString()}`}\n// {`end : ${range[0]?.endDate?.toISOString()}`}\n","import React from 'react';\nimport './App.css';\nimport theme from './theme/theme';\nimport SecureSharePage from './pages/SecureSharePage';\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query'\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { AuthProvider } from './components/auth';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <ChakraProvider resetCSS theme={theme}>\n           <SecureSharePage />\n        </ChakraProvider>\n      </AuthProvider>\n     </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>, document.getElementById('modal-window'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}