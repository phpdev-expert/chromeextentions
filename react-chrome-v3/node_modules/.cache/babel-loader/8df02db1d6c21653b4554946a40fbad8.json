{"ast":null,"code":"import _regeneratorRuntime from \"/home/dh/Desktop/react-chrome-secureshare/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dh/Desktop/react-chrome-secureshare/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GraphQLClient } from 'graphql-request'; // import { RefreshUser } from './user';\n// const urls = {\n//   test: `https://graphql.dev.defencestation.ca`,\n//   development: import.meta.env.PUBLIC_API || 'http://localhost:3000/graphql',\n//   production: window?._env_?.GRAPH_API,\n// };\n\nvar graphQLClient = new GraphQLClient('https://graphql.dev.defencestation.ca/graphql');\n/**\n * @param promise A promise to resolve\n * @nthTry Number of tries before rejecting\n * @desc Retries a promise n no. of times before rejecting.\n * @returns resolved promise\n */\n\nfunction retryPromise(_x, _x2) {\n  return _retryPromise.apply(this, arguments);\n} // Obtain the fresh token each time the function is called\n\n\nfunction _retryPromise() {\n  _retryPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(promise, nthTry) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return promise;\n\n          case 3:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n\n            if (!(nthTry === 1)) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", Promise.reject(_context2.t0));\n\n          case 11:\n            return _context2.abrupt(\"return\", retryPromise(promise, nthTry - 1));\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n  return _retryPromise.apply(this, arguments);\n}\n\nfunction getAccessToken() {\n  return 'bearer v4.public.eyJpc3MiOiJhdXRobi1zZXJ2aWNlIiwiYXVkIjoiYXBwLmRlZmVuc2VzdGF0aW9uLmNhIiwiZXhwIjoiMjAyMi0wNC0xN1QxNDozODo0Ny4zNDM4Njg4NTRaIiwiaWF0IjoiMjAyMi0wNC0xN1QwNjozODo0Ny4zNDM4NzUyMzFaIiwianRpIjoiMjE0MmE1YWQtMzdlYi00NTNhLTg1MTUtYjRjNjFkNjUyNTQxIiwiQWRkaXRpb25hbENsYWltcyI6eyJmbiI6InRlc3QiLCJsbiI6InRlc3QiLCJ1c24iOiJ0ZXN0QHRlc3QuY29tIiwiYWNpIjoiNzU0NjE2Nzc2MCIsImFjdCI6InJvb3Q6YnVzaW5lc3MiLCJQZXJtaXNzaW9ucyI6bnVsbH19wLICb9y25WmCEJO1gKZnCxHQgWAwEckH_UI5ZnRDdvGuiogoh79WM5eT7DT25bcyZJKGB6GCzS0ReLnLKG99DQ';\n}\n\nvar request = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, variables) {\n    var nthTry,\n        requestHeaders,\n        data,\n        _error$response,\n        _error$response$error,\n        _error$response2,\n        _error$response2$erro,\n        _error$response3,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            nthTry = _args.length > 2 && _args[2] !== undefined ? _args[2] : 2;\n            // console.log(nthTry);\n            requestHeaders = {}; // if (!import.meta.env.MODE || import.meta.env.MODE === 'development') {\n\n            if (getAccessToken()) {\n              requestHeaders = {\n                authorization: \"\".concat(getAccessToken())\n              }; // }\n            }\n\n            _context.prev = 3;\n            _context.next = 6;\n            return graphQLClient.request(query, variables, requestHeaders);\n\n          case 6:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](3);\n\n            if (!(nthTry !== 1)) {\n              _context.next = 16;\n              break;\n            }\n\n            if (!((_context.t0 === null || _context.t0 === void 0 ? void 0 : (_error$response = _context.t0.response) === null || _error$response === void 0 ? void 0 : (_error$response$error = _error$response.errors) === null || _error$response$error === void 0 ? void 0 : _error$response$error.length) > 0)) {\n              _context.next = 16;\n              break;\n            }\n\n            if ((_context.t0 === null || _context.t0 === void 0 ? void 0 : (_error$response2 = _context.t0.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$erro = _error$response2.errors[0].extensions) === null || _error$response2$erro === void 0 ? void 0 : _error$response2$erro.code) === 'unauthenticated' && (_context.t0 === null || _context.t0 === void 0 ? void 0 : (_error$response3 = _context.t0.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.errors[0].message) === 'jwt: exp claim is invalid') {\n              // console.log(error?.response?.errors[0].extensions);\n              // const atk = localStorage.getItem('access-token');\n              // const rtk = localStorage.getItem('refresh-token');\n              try {// if (\n                //   !import.meta.env.MODE ||\n                //   import.meta.env.MODE === 'development'\n                // ) {\n                // const newtokens = await RefreshUser(atk, rtk);\n                // localStorage.setItem('access-token', newtokens.data.atoken);\n                // localStorage.setItem('refresh-token', newtokens.data.rtoken);\n              } catch (e) {// console.log(e);\n              } // lets send a request to refresh the token\n\n            }\n\n            return _context.abrupt(\"return\", request(query, variables, nthTry - 1));\n\n          case 16:\n            throw _context.t0;\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 10]]);\n  }));\n\n  return function request(_x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport { graphQLClient, request };","map":{"version":3,"sources":["/home/dh/Desktop/react-chrome-secureshare/src/api/graphql_api.js"],"names":["GraphQLClient","graphQLClient","retryPromise","promise","nthTry","data","Promise","reject","getAccessToken","request","query","variables","requestHeaders","authorization","response","errors","length","extensions","code","message","e"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,iBAA9B,C,CACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,aAAa,GAAG,IAAID,aAAJ,CAAkB,+CAAlB,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;SACeE,Y;;EAqBf;;;;2EArBA,kBAA4BC,OAA5B,EAAqCC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGuBD,OAHvB;;AAAA;AAGUE,YAAAA,IAHV;AAAA,8CAKWA,IALX;;AAAA;AAAA;AAAA;;AAAA,kBAQQD,MAAM,KAAK,CARnB;AAAA;AAAA;AAAA;;AAAA,8CASaE,OAAO,CAACC,MAAR,cATb;;AAAA;AAAA,8CAiBWL,YAAY,CAACC,OAAD,EAAUC,MAAM,GAAG,CAAnB,CAjBvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBA,SAASI,cAAT,GAA0B;AACxB,SAAO,6fAAP;AACD;;AAED,IAAMC,OAAO;AAAA,sEAAG,iBAAOC,KAAP,EAAcC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAyBP,YAAAA,MAAzB,2DAAkC,CAAlC;AACd;AACIQ,YAAAA,cAFU,GAEO,EAFP,EAKd;;AACA,gBAAIJ,cAAc,EAAlB,EAAsB;AACpBI,cAAAA,cAAc,GAAG;AACfC,gBAAAA,aAAa,YAAKL,cAAc,EAAnB;AADE,eAAjB,CADoB,CAIpB;AACD;;AAXa;AAAA;AAAA,mBAcOP,aAAa,CAACQ,OAAd,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,cAAxC,CAdP;;AAAA;AAcNP,YAAAA,IAdM;AAAA,6CAeLA,IAfK;;AAAA;AAAA;AAAA;;AAAA,kBAiBRD,MAAM,KAAK,CAjBH;AAAA;AAAA;AAAA;;AAAA,kBAkBN,0FAAOU,QAAP,6FAAiBC,MAAjB,gFAAyBC,MAAzB,IAAkC,CAlB5B;AAAA;AAAA;AAAA;;AAmBR,gBACE,2FAAOF,QAAP,+FAAiBC,MAAjB,CAAwB,CAAxB,EAA2BE,UAA3B,gFAAuCC,IAAvC,MAAgD,iBAAhD,IACA,2FAAOJ,QAAP,sEAAiBC,MAAjB,CAAwB,CAAxB,EAA2BI,OAA3B,MAAuC,2BAFzC,EAGE;AACA;AAEA;AACA;AAEA,kBAAI,CACF;AACA;AACA;AACA;AACA;AACA;AACA;AACD,eARD,CAQE,OAAOC,CAAP,EAAU,CACV;AACD,eAhBD,CAkBA;;AACD;;AAzCO,6CA2CDX,OAAO,CAACC,KAAD,EAAQC,SAAR,EAAmBP,MAAM,GAAG,CAA5B,CA3CN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPK,OAAO;AAAA;AAAA;AAAA,GAAb;;AAmDA,SAASR,aAAT,EAAwBQ,OAAxB","sourcesContent":["import { GraphQLClient } from 'graphql-request';\n// import { RefreshUser } from './user';\n\n// const urls = {\n//   test: `https://graphql.dev.defencestation.ca`,\n//   development: import.meta.env.PUBLIC_API || 'http://localhost:3000/graphql',\n//   production: window?._env_?.GRAPH_API,\n// };\n\nconst graphQLClient = new GraphQLClient('https://graphql.dev.defencestation.ca/graphql');\n\n/**\n * @param promise A promise to resolve\n * @nthTry Number of tries before rejecting\n * @desc Retries a promise n no. of times before rejecting.\n * @returns resolved promise\n */\nasync function retryPromise(promise, nthTry) {\n  try {\n    // try to resolve the promise\n    const data = await promise;\n    // if resolved simply return the result back to the caller\n    return data;\n  } catch (e) {\n    // if the promise fails and we are down to 1 try we reject\n    if (nthTry === 1) {\n      return Promise.reject(e);\n    }\n    // if the promise fails and the current try is not equal to 1\n    // we call this function again from itself but this time\n    // we reduce the no. of tries by one\n    // so that eventually we reach to \"1 try left\" where we know we have to stop and reject\n    // console.log('retrying', nthTry, 'time');\n    // we return whatever is the result of calling the same function\n    return retryPromise(promise, nthTry - 1);\n  }\n}\n\n// Obtain the fresh token each time the function is called\nfunction getAccessToken() {\n  return 'bearer v4.public.eyJpc3MiOiJhdXRobi1zZXJ2aWNlIiwiYXVkIjoiYXBwLmRlZmVuc2VzdGF0aW9uLmNhIiwiZXhwIjoiMjAyMi0wNC0xN1QxNDozODo0Ny4zNDM4Njg4NTRaIiwiaWF0IjoiMjAyMi0wNC0xN1QwNjozODo0Ny4zNDM4NzUyMzFaIiwianRpIjoiMjE0MmE1YWQtMzdlYi00NTNhLTg1MTUtYjRjNjFkNjUyNTQxIiwiQWRkaXRpb25hbENsYWltcyI6eyJmbiI6InRlc3QiLCJsbiI6InRlc3QiLCJ1c24iOiJ0ZXN0QHRlc3QuY29tIiwiYWNpIjoiNzU0NjE2Nzc2MCIsImFjdCI6InJvb3Q6YnVzaW5lc3MiLCJQZXJtaXNzaW9ucyI6bnVsbH19wLICb9y25WmCEJO1gKZnCxHQgWAwEckH_UI5ZnRDdvGuiogoh79WM5eT7DT25bcyZJKGB6GCzS0ReLnLKG99DQ';\n}\n\nconst request = async (query, variables, nthTry = 2) => {\n  // console.log(nthTry);\n  let requestHeaders = {};\n\n\n  // if (!import.meta.env.MODE || import.meta.env.MODE === 'development') {\n  if (getAccessToken()) {\n    requestHeaders = {\n      authorization: `${getAccessToken()}`,\n    };\n    // }\n  }\n\n  try {\n    const data = await graphQLClient.request(query, variables, requestHeaders);\n    return data;\n  } catch (error) {\n    if (nthTry !== 1) {\n      if (error?.response?.errors?.length > 0) {\n        if (\n          error?.response?.errors[0].extensions?.code === 'unauthenticated' &&\n          error?.response?.errors[0].message === 'jwt: exp claim is invalid'\n        ) {\n          // console.log(error?.response?.errors[0].extensions);\n\n          // const atk = localStorage.getItem('access-token');\n          // const rtk = localStorage.getItem('refresh-token');\n\n          try {\n            // if (\n            //   !import.meta.env.MODE ||\n            //   import.meta.env.MODE === 'development'\n            // ) {\n            // const newtokens = await RefreshUser(atk, rtk);\n            // localStorage.setItem('access-token', newtokens.data.atoken);\n            // localStorage.setItem('refresh-token', newtokens.data.rtoken);\n          } catch (e) {\n            // console.log(e);\n          }\n\n          // lets send a request to refresh the token\n        }\n\n        return request(query, variables, nthTry - 1);\n      }\n    }\n\n    throw error;\n  }\n};\n\nexport { graphQLClient, request };\n"]},"metadata":{},"sourceType":"module"}