{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/dh/Desktop/react-chrome-secureshare/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _this = this,\n    _jsxFileName = \"/home/dh/Desktop/react-chrome-secureshare/src/components/auth.jsx\";\n\nimport React, { createContext, useContext, useMemo, useCallback } from 'react';\nimport { useQueryClient, useQuery } from 'react-query';\nimport { gql } from 'graphql-request';\nimport { request } from '../api/graphql_api';\nvar AuthContext = createContext({});\nvar UserInfoQuery = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  mutation MyMutation {\\n    v1_iam_IAM_UserProfile {\\n      user {\\n        accountId\\n        companyInfoSet\\n        email\\n        createdAt\\n        emailVerified\\n        firstName\\n        lastName\\n        permissions\\n        resetOnLogin\\n        type\\n        updatedAt\\n        username\\n      }\\n    }\\n  }\\n\"])));\nexport var AuthProvider = function AuthProvider(_ref) {\n  var _data$iam_IAM_UserPro4;\n\n  var children = _ref.children;\n  var queryClient = useQueryClient();\n\n  var _useQuery = useQuery('userinfo', function () {\n    return request(UserInfoQuery);\n  }, {\n    retry: false\n  }),\n      data = _useQuery.data,\n      isLoading = _useQuery.isLoading,\n      refetch = _useQuery.refetch,\n      isFetching = _useQuery.isFetching;\n\n  var value = useMemo(function () {\n    var _data$iam_IAM_UserPro, _data$iam_IAM_UserPro2, _data$iam_IAM_UserPro3;\n\n    return {\n      isAuthenticated: !!(data === null || data === void 0 ? void 0 : (_data$iam_IAM_UserPro = data.iam_IAM_UserProfile) === null || _data$iam_IAM_UserPro === void 0 ? void 0 : (_data$iam_IAM_UserPro2 = _data$iam_IAM_UserPro.user) === null || _data$iam_IAM_UserPro2 === void 0 ? void 0 : _data$iam_IAM_UserPro2.username),\n      user: data === null || data === void 0 ? void 0 : (_data$iam_IAM_UserPro3 = data.iam_IAM_UserProfile) === null || _data$iam_IAM_UserPro3 === void 0 ? void 0 : _data$iam_IAM_UserPro3.user,\n      isFetching: isFetching,\n      isLoading: isLoading,\n      logout: logout,\n      login: login,\n      loggedOut: loggedOut,\n      refetch: refetch,\n      revalidate: function revalidate() {\n        return queryClient.invalidateQueries('userinfo');\n      }\n    };\n  }, [loggedOut, login, logout, queryClient, data === null || data === void 0 ? void 0 : (_data$iam_IAM_UserPro4 = data.iam_IAM_UserProfile) === null || _data$iam_IAM_UserPro4 === void 0 ? void 0 : _data$iam_IAM_UserPro4.user, isFetching, isLoading, refetch]);\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  }, children);\n};\nexport var useAuth = function useAuth() {\n  return useContext(AuthContext);\n}; // revalidate: () => queryClient.invalidateQueries('userinfo'),","map":{"version":3,"sources":["/home/dh/Desktop/react-chrome-secureshare/src/components/auth.jsx"],"names":["React","createContext","useContext","useMemo","useCallback","useQueryClient","useQuery","gql","request","AuthContext","UserInfoQuery","AuthProvider","children","queryClient","retry","data","isLoading","refetch","isFetching","value","isAuthenticated","iam_IAM_UserProfile","user","username","logout","login","loggedOut","revalidate","invalidateQueries","useAuth"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,OAA3C,EAAoDC,WAApD,QAAuE,OAAvE;AAEA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,aAAzC;AAEA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,IAAMC,WAAW,GAAGR,aAAa,CAAC,EAAD,CAAjC;AAEA,IAAMS,aAAa,GAAGH,GAAH,wYAAnB;AAqBA,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC5C,MAAMC,WAAW,GAAGR,cAAc,EAAlC;;AAEA,kBAAiDC,QAAQ,CACvD,UADuD,EAEvD;AAAA,WAAME,OAAO,CAACE,aAAD,CAAb;AAAA,GAFuD,EAGvD;AACEI,IAAAA,KAAK,EAAE;AADT,GAHuD,CAAzD;AAAA,MAAQC,IAAR,aAAQA,IAAR;AAAA,MAAcC,SAAd,aAAcA,SAAd;AAAA,MAAyBC,OAAzB,aAAyBA,OAAzB;AAAA,MAAkCC,UAAlC,aAAkCA,UAAlC;;AAYA,MAAMC,KAAK,GAAGhB,OAAO,CACnB;AAAA;;AAAA,WAAO;AACLiB,MAAAA,eAAe,EAAE,CAAC,EAACL,IAAD,aAACA,IAAD,gDAACA,IAAI,CAAEM,mBAAP,oFAAC,sBAA2BC,IAA5B,2DAAC,uBAAiCC,QAAlC,CADb;AAELD,MAAAA,IAAI,EAAEP,IAAF,aAAEA,IAAF,iDAAEA,IAAI,CAAEM,mBAAR,2DAAE,uBAA2BC,IAF5B;AAGLJ,MAAAA,UAAU,EAAVA,UAHK;AAILF,MAAAA,SAAS,EAATA,SAJK;AAKLQ,MAAAA,MAAM,EAANA,MALK;AAMLC,MAAAA,KAAK,EAALA,KANK;AAOLC,MAAAA,SAAS,EAATA,SAPK;AAQLT,MAAAA,OAAO,EAAPA,OARK;AASLU,MAAAA,UAAU,EAAE;AAAA,eAAMd,WAAW,CAACe,iBAAZ,CAA8B,UAA9B,CAAN;AAAA;AATP,KAAP;AAAA,GADmB,EAYnB,CACEF,SADF,EAEED,KAFF,EAGED,MAHF,EAIEX,WAJF,EAKEE,IALF,aAKEA,IALF,iDAKEA,IAAI,CAAEM,mBALR,2DAKE,uBAA2BC,IAL7B,EAMEJ,UANF,EAOEF,SAPF,EAQEC,OARF,CAZmB,CAArB;AAwBA,sBAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCP,QAArC,CAAP;AACD,CAxCM;AA0CP,OAAO,IAAMiB,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAM3B,UAAU,CAACO,WAAD,CAAhB;AAAA,CAAhB,C,CAEP","sourcesContent":["import React, { createContext, useContext, useMemo, useCallback } from 'react';\n\nimport { useQueryClient, useQuery } from 'react-query';\n\nimport { gql } from 'graphql-request';\nimport { request } from '../api/graphql_api';\n\nconst AuthContext = createContext({});\n\nconst UserInfoQuery = gql`\n  mutation MyMutation {\n    v1_iam_IAM_UserProfile {\n      user {\n        accountId\n        companyInfoSet\n        email\n        createdAt\n        emailVerified\n        firstName\n        lastName\n        permissions\n        resetOnLogin\n        type\n        updatedAt\n        username\n      }\n    }\n  }\n`;\n\nexport const AuthProvider = ({ children }) => {\n  const queryClient = useQueryClient();\n\n  const { data, isLoading, refetch, isFetching } = useQuery(\n    'userinfo',\n    () => request(UserInfoQuery),\n    {\n      retry: false,\n    },\n  );\n\n\n\n\n\n  const value = useMemo(\n    () => ({\n      isAuthenticated: !!data?.iam_IAM_UserProfile?.user?.username,\n      user: data?.iam_IAM_UserProfile?.user,\n      isFetching,\n      isLoading,\n      logout,\n      login,\n      loggedOut,\n      refetch,\n      revalidate: () => queryClient.invalidateQueries('userinfo'),\n    }),\n    [\n      loggedOut,\n      login,\n      logout,\n      queryClient,\n      data?.iam_IAM_UserProfile?.user,\n      isFetching,\n      isLoading,\n      refetch,\n    ],\n  );\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => useContext(AuthContext);\n\n// revalidate: () => queryClient.invalidateQueries('userinfo'),\n"]},"metadata":{},"sourceType":"module"}