{"ast":null,"code":"import _regeneratorRuntime from\"/home/dh/Desktop/react-chrome-secureshare/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/dh/Desktop/react-chrome-secureshare/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var readfile=function readfile(file){return new Promise(function(resolve,reject){var fr=new FileReader();fr.onload=function(){resolve(fr.result);};fr.readAsArrayBuffer(file);});};export var Encrypt=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(key,file){var plaintextbytes,plaintextbyteArray,pbkdf2iterations,passphrasebytes,pbkdf2salt,passphrasekey,pbkdf2bytes,pbkdf2bytesArray,keybytes,ivbytes,aeskey,cipherbytes,cipherbytesArray,resultbytes,blob;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return readfile(file);case 3:plaintextbytes=_context.sent;plaintextbyteArray=new Uint8Array(plaintextbytes);pbkdf2iterations=10000;passphrasebytes=new TextEncoder('utf-8').encode(key);pbkdf2salt=window.crypto.getRandomValues(new Uint8Array(8));_context.next=10;return window.crypto.subtle.importKey('raw',passphrasebytes,{name:'PBKDF2'},false,['deriveBits']);case 10:passphrasekey=_context.sent;_context.next=13;return window.crypto.subtle.deriveBits({name:'PBKDF2',salt:pbkdf2salt,iterations:pbkdf2iterations,hash:'SHA-256'},passphrasekey,384);case 13:pbkdf2bytes=_context.sent;//   console.log('pbkdf2bytes derived');\npbkdf2bytesArray=new Uint8Array(pbkdf2bytes);keybytes=pbkdf2bytesArray.slice(0,32);ivbytes=pbkdf2bytesArray.slice(32);_context.next=19;return window.crypto.subtle.importKey('raw',keybytes,{name:'AES-CBC',length:256},false,['encrypt']);case 19:aeskey=_context.sent;_context.next=22;return window.crypto.subtle.encrypt({name:'AES-CBC',iv:ivbytes},aeskey,plaintextbyteArray);case 22:cipherbytes=_context.sent;if(!cipherbytes){// TODO: return error for crypt probs\n// spnEncstatus.classList.add('redspan');\n// spnEncstatus.innerHTML = '<p>Error encrypting file.  See console log.</p>';\n}cipherbytesArray=new Uint8Array(cipherbytes);resultbytes=new Uint8Array(cipherbytesArray.length+16);resultbytes.set(new TextEncoder('utf-8').encode('Salted__'));resultbytes.set(pbkdf2salt,8);resultbytes.set(cipherbytesArray,16);blob=new Blob([resultbytes]);return _context.abrupt(\"return\",blob);case 33:_context.prev=33;_context.t0=_context[\"catch\"](0);console.log('encrypt error');throw _context.t0;case 37:case\"end\":return _context.stop();}}},_callee,null,[[0,33]]);}));return function Encrypt(_x,_x2){return _ref.apply(this,arguments);};}();export var Decrypt=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key,file){var cipherbytes,plaintextbyteArray,pbkdf2iterations,passphrasebytes,pbkdf2salt,passphrasekey,pbkdf2bytes,pbkdf2bytesArrays,keybytes,ivbytes,cipherbyteData,aeskey,plaintextbytes,plaintextArray,blob;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return readfile(file);case 3:cipherbytes=_context2.sent;plaintextbyteArray=new Uint8Array(cipherbytes);pbkdf2iterations=10000;passphrasebytes=new TextEncoder('utf-8').encode(key);pbkdf2salt=plaintextbyteArray.slice(8,16);_context2.next=10;return window.crypto.subtle.importKey('raw',passphrasebytes,{name:'PBKDF2'},false,['deriveBits']);case 10:passphrasekey=_context2.sent;_context2.next=13;return window.crypto.subtle.deriveBits({name:'PBKDF2',salt:pbkdf2salt,iterations:pbkdf2iterations,hash:'SHA-256'},passphrasekey,384);case 13:pbkdf2bytes=_context2.sent;pbkdf2bytesArrays=new Uint8Array(pbkdf2bytes);keybytes=pbkdf2bytesArrays.slice(0,32);ivbytes=pbkdf2bytesArrays.slice(32);cipherbyteData=plaintextbyteArray.slice(16);_context2.next=20;return window.crypto.subtle.importKey('raw',keybytes,{name:'AES-CBC',length:256},false,['decrypt']);case 20:aeskey=_context2.sent;_context2.next=23;return window.crypto.subtle.decrypt({name:'AES-CBC',iv:ivbytes},aeskey,cipherbyteData);case 23:plaintextbytes=_context2.sent;plaintextArray=new Uint8Array(plaintextbytes);blob=new Blob([plaintextArray]);return _context2.abrupt(\"return\",blob);case 29:_context2.prev=29;_context2.t0=_context2[\"catch\"](0);console.log('decryption error');console.log(_context2.t0);throw _context2.t0;case 34:case\"end\":return _context2.stop();}}},_callee2,null,[[0,29]]);}));return function Decrypt(_x3,_x4){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/dh/Desktop/react-chrome-secureshare/src/utils/filecrypt.js"],"names":["readfile","file","Promise","resolve","reject","fr","FileReader","onload","result","readAsArrayBuffer","Encrypt","key","plaintextbytes","plaintextbyteArray","Uint8Array","pbkdf2iterations","passphrasebytes","TextEncoder","encode","pbkdf2salt","window","crypto","getRandomValues","subtle","importKey","name","passphrasekey","deriveBits","salt","iterations","hash","pbkdf2bytes","pbkdf2bytesArray","keybytes","slice","ivbytes","length","aeskey","encrypt","iv","cipherbytes","cipherbytesArray","resultbytes","set","blob","Blob","console","log","Decrypt","pbkdf2bytesArrays","cipherbyteData","decrypt","plaintextArray"],"mappings":"6TAAA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAU,CACzB,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtC,GAAMC,CAAAA,EAAE,CAAG,GAAIC,CAAAA,UAAJ,EAAX,CACAD,EAAE,CAACE,MAAH,CAAY,UAAM,CAChBJ,OAAO,CAACE,EAAE,CAACG,MAAJ,CAAP,CACD,CAFD,CAGAH,EAAE,CAACI,iBAAH,CAAqBR,IAArB,EACD,CANM,CAAP,CAOD,CARD,CAUA,MAAO,IAAMS,CAAAA,OAAO,0FAAG,iBAAOC,GAAP,CAAYV,IAAZ,2VAEUD,CAAAA,QAAQ,CAACC,IAAD,CAFlB,QAEbW,cAFa,eAIbC,kBAJa,CAIQ,GAAIC,CAAAA,UAAJ,CAAeF,cAAf,CAJR,CAMbG,gBANa,CAMM,KANN,CAObC,eAPa,CAOK,GAAIC,CAAAA,WAAJ,CAAgB,OAAhB,EAAyBC,MAAzB,CAAgCP,GAAhC,CAPL,CAQbQ,UARa,CAQAC,MAAM,CAACC,MAAP,CAAcC,eAAd,CAA8B,GAAIR,CAAAA,UAAJ,CAAe,CAAf,CAA9B,CARA,wBAUSM,CAAAA,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBC,SAArB,CAC1B,KAD0B,CAE1BR,eAF0B,CAG1B,CAAES,IAAI,CAAE,QAAR,CAH0B,CAI1B,KAJ0B,CAK1B,CAAC,YAAD,CAL0B,CAVT,SAUbC,aAVa,sCAkBON,CAAAA,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBI,UAArB,CACxB,CACEF,IAAI,CAAE,QADR,CAEEG,IAAI,CAAET,UAFR,CAGEU,UAAU,CAAEd,gBAHd,CAIEe,IAAI,CAAE,SAJR,CADwB,CAOxBJ,aAPwB,CAQxB,GARwB,CAlBP,SAkBbK,WAlBa,eA6BnB;AACMC,gBA9Ba,CA8BM,GAAIlB,CAAAA,UAAJ,CAAeiB,WAAf,CA9BN,CAgCbE,QAhCa,CAgCFD,gBAAgB,CAACE,KAAjB,CAAuB,CAAvB,CAA0B,EAA1B,CAhCE,CAiCbC,OAjCa,CAiCHH,gBAAgB,CAACE,KAAjB,CAAuB,EAAvB,CAjCG,wBAmCEd,CAAAA,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBC,SAArB,CACnB,KADmB,CAEnBS,QAFmB,CAGnB,CAAER,IAAI,CAAE,SAAR,CAAmBW,MAAM,CAAE,GAA3B,CAHmB,CAInB,KAJmB,CAKnB,CAAC,SAAD,CALmB,CAnCF,SAmCbC,MAnCa,sCA2COjB,CAAAA,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBe,OAArB,CACxB,CAAEb,IAAI,CAAE,SAAR,CAAmBc,EAAE,CAAEJ,OAAvB,CADwB,CAExBE,MAFwB,CAGxBxB,kBAHwB,CA3CP,SA2Cb2B,WA3Ca,eAiDnB,GAAI,CAACA,WAAL,CAAkB,CAChB;AACA;AACA;AACD,CAEKC,gBAvDa,CAuDM,GAAI3B,CAAAA,UAAJ,CAAe0B,WAAf,CAvDN,CAyDbE,WAzDa,CAyDC,GAAI5B,CAAAA,UAAJ,CAAe2B,gBAAgB,CAACL,MAAjB,CAA0B,EAAzC,CAzDD,CA0DnBM,WAAW,CAACC,GAAZ,CAAgB,GAAI1B,CAAAA,WAAJ,CAAgB,OAAhB,EAAyBC,MAAzB,CAAgC,UAAhC,CAAhB,EACAwB,WAAW,CAACC,GAAZ,CAAgBxB,UAAhB,CAA4B,CAA5B,EACAuB,WAAW,CAACC,GAAZ,CAAgBF,gBAAhB,CAAkC,EAAlC,EAEMG,IA9Da,CA8DN,GAAIC,CAAAA,IAAJ,CAAS,CAACH,WAAD,CAAT,CA9DM,iCAgEZE,IAhEY,4DAkEnBE,OAAO,CAACC,GAAR,CAAY,eAAZ,EAlEmB,uFAAH,kBAAPrC,CAAAA,OAAO,gDAAb,CAsEP,MAAO,IAAMsC,CAAAA,OAAO,2FAAG,kBAAOrC,GAAP,CAAYV,IAAZ,mWAEOD,CAAAA,QAAQ,CAACC,IAAD,CAFf,QAEbuC,WAFa,gBAIb3B,kBAJa,CAIQ,GAAIC,CAAAA,UAAJ,CAAe0B,WAAf,CAJR,CAMbzB,gBANa,CAMM,KANN,CAObC,eAPa,CAOK,GAAIC,CAAAA,WAAJ,CAAgB,OAAhB,EAAyBC,MAAzB,CAAgCP,GAAhC,CAPL,CAQbQ,UARa,CAQAN,kBAAkB,CAACqB,KAAnB,CAAyB,CAAzB,CAA4B,EAA5B,CARA,yBAUSd,CAAAA,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBC,SAArB,CAC1B,KAD0B,CAE1BR,eAF0B,CAG1B,CAAES,IAAI,CAAE,QAAR,CAH0B,CAI1B,KAJ0B,CAK1B,CAAC,YAAD,CAL0B,CAVT,SAUbC,aAVa,wCAkBON,CAAAA,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBI,UAArB,CACxB,CACEF,IAAI,CAAE,QADR,CAEEG,IAAI,CAAET,UAFR,CAGEU,UAAU,CAAEd,gBAHd,CAIEe,IAAI,CAAE,SAJR,CADwB,CAOxBJ,aAPwB,CAQxB,GARwB,CAlBP,SAkBbK,WAlBa,gBA6BbkB,iBA7Ba,CA6BO,GAAInC,CAAAA,UAAJ,CAAeiB,WAAf,CA7BP,CA+BbE,QA/Ba,CA+BFgB,iBAAiB,CAACf,KAAlB,CAAwB,CAAxB,CAA2B,EAA3B,CA/BE,CAgCbC,OAhCa,CAgCHc,iBAAiB,CAACf,KAAlB,CAAwB,EAAxB,CAhCG,CAiCbgB,cAjCa,CAiCIrC,kBAAkB,CAACqB,KAAnB,CAAyB,EAAzB,CAjCJ,yBAmCEd,CAAAA,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBC,SAArB,CACnB,KADmB,CAEnBS,QAFmB,CAGnB,CAAER,IAAI,CAAE,SAAR,CAAmBW,MAAM,CAAE,GAA3B,CAHmB,CAInB,KAJmB,CAKnB,CAAC,SAAD,CALmB,CAnCF,SAmCbC,MAnCa,wCA2CUjB,CAAAA,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqB4B,OAArB,CAC3B,CAAE1B,IAAI,CAAE,SAAR,CAAmBc,EAAE,CAAEJ,OAAvB,CAD2B,CAE3BE,MAF2B,CAG3Ba,cAH2B,CA3CV,SA2CbtC,cA3Ca,gBAiDbwC,cAjDa,CAiDI,GAAItC,CAAAA,UAAJ,CAAeF,cAAf,CAjDJ,CAmDbgC,IAnDa,CAmDN,GAAIC,CAAAA,IAAJ,CAAS,CAACO,cAAD,CAAT,CAnDM,kCAqDZR,IArDY,+DAuDnBE,OAAO,CAACC,GAAR,CAAY,kBAAZ,EACAD,OAAO,CAACC,GAAR,eAxDmB,0FAAH,kBAAPC,CAAAA,OAAO,kDAAb","sourcesContent":["const readfile = (file) => {\n  return new Promise((resolve, reject) => {\n    const fr = new FileReader();\n    fr.onload = () => {\n      resolve(fr.result);\n    };\n    fr.readAsArrayBuffer(file);\n  });\n};\n\nexport const Encrypt = async (key, file) => {\n  try {\n    const plaintextbytes = await readfile(file);\n\n    const plaintextbyteArray = new Uint8Array(plaintextbytes);\n\n    const pbkdf2iterations = 10000;\n    const passphrasebytes = new TextEncoder('utf-8').encode(key);\n    const pbkdf2salt = window.crypto.getRandomValues(new Uint8Array(8));\n\n    const passphrasekey = await window.crypto.subtle.importKey(\n      'raw',\n      passphrasebytes,\n      { name: 'PBKDF2' },\n      false,\n      ['deriveBits'],\n    );\n\n    const pbkdf2bytes = await window.crypto.subtle.deriveBits(\n      {\n        name: 'PBKDF2',\n        salt: pbkdf2salt,\n        iterations: pbkdf2iterations,\n        hash: 'SHA-256',\n      },\n      passphrasekey,\n      384,\n    );\n\n    //   console.log('pbkdf2bytes derived');\n    const pbkdf2bytesArray = new Uint8Array(pbkdf2bytes);\n\n    const keybytes = pbkdf2bytesArray.slice(0, 32);\n    const ivbytes = pbkdf2bytesArray.slice(32);\n\n    const aeskey = await window.crypto.subtle.importKey(\n      'raw',\n      keybytes,\n      { name: 'AES-CBC', length: 256 },\n      false,\n      ['encrypt'],\n    );\n\n    const cipherbytes = await window.crypto.subtle.encrypt(\n      { name: 'AES-CBC', iv: ivbytes },\n      aeskey,\n      plaintextbyteArray,\n    );\n\n    if (!cipherbytes) {\n      // TODO: return error for crypt probs\n      // spnEncstatus.classList.add('redspan');\n      // spnEncstatus.innerHTML = '<p>Error encrypting file.  See console log.</p>';\n    }\n\n    const cipherbytesArray = new Uint8Array(cipherbytes);\n\n    const resultbytes = new Uint8Array(cipherbytesArray.length + 16);\n    resultbytes.set(new TextEncoder('utf-8').encode('Salted__'));\n    resultbytes.set(pbkdf2salt, 8);\n    resultbytes.set(cipherbytesArray, 16);\n\n    const blob = new Blob([resultbytes]);\n\n    return blob;\n  } catch (err) {\n    console.log('encrypt error');\n    throw err;\n  }\n};\nexport const Decrypt = async (key, file) => {\n  try {\n    const cipherbytes = await readfile(file);\n\n    const plaintextbyteArray = new Uint8Array(cipherbytes);\n\n    const pbkdf2iterations = 10000;\n    const passphrasebytes = new TextEncoder('utf-8').encode(key);\n    const pbkdf2salt = plaintextbyteArray.slice(8, 16);\n\n    const passphrasekey = await window.crypto.subtle.importKey(\n      'raw',\n      passphrasebytes,\n      { name: 'PBKDF2' },\n      false,\n      ['deriveBits'],\n    );\n\n    const pbkdf2bytes = await window.crypto.subtle.deriveBits(\n      {\n        name: 'PBKDF2',\n        salt: pbkdf2salt,\n        iterations: pbkdf2iterations,\n        hash: 'SHA-256',\n      },\n      passphrasekey,\n      384,\n    );\n\n    const pbkdf2bytesArrays = new Uint8Array(pbkdf2bytes);\n\n    const keybytes = pbkdf2bytesArrays.slice(0, 32);\n    const ivbytes = pbkdf2bytesArrays.slice(32);\n    const cipherbyteData = plaintextbyteArray.slice(16);\n\n    const aeskey = await window.crypto.subtle.importKey(\n      'raw',\n      keybytes,\n      { name: 'AES-CBC', length: 256 },\n      false,\n      ['decrypt'],\n    );\n\n    const plaintextbytes = await window.crypto.subtle.decrypt(\n      { name: 'AES-CBC', iv: ivbytes },\n      aeskey,\n      cipherbyteData,\n    );\n\n    const plaintextArray = new Uint8Array(plaintextbytes);\n\n    const blob = new Blob([plaintextArray]);\n\n    return blob;\n  } catch (err) {\n    console.log('decryption error');\n    console.log(err);\n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}