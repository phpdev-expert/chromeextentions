{"ast":null,"code":"import _regeneratorRuntime from\"/home/dh/Desktop/react-chrome-secureshare/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/dh/Desktop/react-chrome-secureshare/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{GraphQLClient}from'graphql-request';// import { RefreshUser } from './user';\n// const urls = {\n//   test: `https://graphql.dev.defencestation.ca`,\n//   development: import.meta.env.PUBLIC_API || 'http://localhost:3000/graphql',\n//   production: window?._env_?.GRAPH_API,\n// };\nvar graphQLClient=new GraphQLClient('https://graphql.dev.defencestation.ca/graphql');/**\n * @param promise A promise to resolve\n * @nthTry Number of tries before rejecting\n * @desc Retries a promise n no. of times before rejecting.\n * @returns resolved promise\n */function retryPromise(_x,_x2){return _retryPromise.apply(this,arguments);}// Obtain the fresh token each time the function is called\nfunction _retryPromise(){_retryPromise=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(promise,nthTry){var data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return promise;case 3:data=_context2.sent;return _context2.abrupt(\"return\",data);case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);if(!(nthTry===1)){_context2.next=11;break;}return _context2.abrupt(\"return\",Promise.reject(_context2.t0));case 11:return _context2.abrupt(\"return\",retryPromise(promise,nthTry-1));case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return _retryPromise.apply(this,arguments);}function getAccessToken(){return localStorage.getItem('access-token');}var request=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(query,variables){var nthTry,requestHeaders,data,_error$response,_error$response$error,_error$response2,_error$response2$erro,_error$response3,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:nthTry=_args.length>2&&_args[2]!==undefined?_args[2]:2;// console.log(nthTry);\nrequestHeaders={};// if (!import.meta.env.MODE || import.meta.env.MODE === 'development') {\nif(getAccessToken()){requestHeaders={authorization:\"\".concat(getAccessToken())};// }\n}_context.prev=3;_context.next=6;return graphQLClient.request(query,variables,requestHeaders);case 6:data=_context.sent;return _context.abrupt(\"return\",data);case 10:_context.prev=10;_context.t0=_context[\"catch\"](3);if(!(nthTry!==1)){_context.next=16;break;}if(!((_context.t0===null||_context.t0===void 0?void 0:(_error$response=_context.t0.response)===null||_error$response===void 0?void 0:(_error$response$error=_error$response.errors)===null||_error$response$error===void 0?void 0:_error$response$error.length)>0)){_context.next=16;break;}if((_context.t0===null||_context.t0===void 0?void 0:(_error$response2=_context.t0.response)===null||_error$response2===void 0?void 0:(_error$response2$erro=_error$response2.errors[0].extensions)===null||_error$response2$erro===void 0?void 0:_error$response2$erro.code)==='unauthenticated'&&(_context.t0===null||_context.t0===void 0?void 0:(_error$response3=_context.t0.response)===null||_error$response3===void 0?void 0:_error$response3.errors[0].message)==='jwt: exp claim is invalid'){// console.log(error?.response?.errors[0].extensions);\n// const atk = localStorage.getItem('access-token');\n// const rtk = localStorage.getItem('refresh-token');\ntry{// if (\n//   !import.meta.env.MODE ||\n//   import.meta.env.MODE === 'development'\n// ) {\n// const newtokens = await RefreshUser(atk, rtk);\n// localStorage.setItem('access-token', newtokens.data.atoken);\n// localStorage.setItem('refresh-token', newtokens.data.rtoken);\n}catch(e){// console.log(e);\n}// lets send a request to refresh the token\n}return _context.abrupt(\"return\",request(query,variables,nthTry-1));case 16:throw _context.t0;case 17:case\"end\":return _context.stop();}}},_callee,null,[[3,10]]);}));return function request(_x3,_x4){return _ref.apply(this,arguments);};}();export{graphQLClient,request};","map":{"version":3,"sources":["/home/dh/Desktop/react-chrome-secureshare/src/api/graphql_api.js"],"names":["GraphQLClient","graphQLClient","retryPromise","promise","nthTry","data","Promise","reject","getAccessToken","localStorage","getItem","request","query","variables","requestHeaders","authorization","response","errors","length","extensions","code","message","e"],"mappings":"6TAAA,OAASA,aAAT,KAA8B,iBAA9B,CACA;AAEA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,aAAa,CAAG,GAAID,CAAAA,aAAJ,CAAkB,+CAAlB,CAAtB,CAEA;AACA;AACA;AACA;AACA;AACA,G,QACeE,CAAAA,Y,qDAqBf;+FArBA,kBAA4BC,OAA5B,CAAqCC,MAArC,uKAGuBD,CAAAA,OAHvB,QAGUE,IAHV,iDAKWA,IALX,kEAQQD,MAAM,GAAK,CARnB,6DASaE,OAAO,CAACC,MAAR,cATb,2CAiBWL,YAAY,CAACC,OAAD,CAAUC,MAAM,CAAG,CAAnB,CAjBvB,wE,+CAsBA,QAASI,CAAAA,cAAT,EAA0B,CACxB,MAAOC,CAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAP,CACD,CAED,GAAMC,CAAAA,OAAO,0FAAG,iBAAOC,KAAP,CAAcC,SAAd,+PAAyBT,MAAzB,+CAAkC,CAAlC,CACd;AACIU,cAFU,CAEO,EAFP,CAKd;AACA,GAAIN,cAAc,EAAlB,CAAsB,CACpBM,cAAc,CAAG,CACfC,aAAa,WAAKP,cAAc,EAAnB,CADE,CAAjB,CAGA;AACD,CAXa,sCAcOP,CAAAA,aAAa,CAACU,OAAd,CAAsBC,KAAtB,CAA6BC,SAA7B,CAAwCC,cAAxC,CAdP,QAcNT,IAdM,+CAeLA,IAfK,iEAiBRD,MAAM,GAAK,CAjBH,gCAkBN,8EAAOY,QAAP,iFAAiBC,MAAjB,sEAAyBC,MAAzB,EAAkC,CAlB5B,2BAmBR,GACE,+EAAOF,QAAP,mFAAiBC,MAAjB,CAAwB,CAAxB,EAA2BE,UAA3B,sEAAuCC,IAAvC,IAAgD,iBAAhD,EACA,+EAAOJ,QAAP,4DAAiBC,MAAjB,CAAwB,CAAxB,EAA2BI,OAA3B,IAAuC,2BAFzC,CAGE,CACA;AAEA;AACA;AAEA,GAAI,CACF;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAAC,MAAOC,CAAP,CAAU,CACV;AACD,CAED;AACD,CAzCO,gCA2CDX,OAAO,CAACC,KAAD,CAAQC,SAAR,CAAmBT,MAAM,CAAG,CAA5B,CA3CN,iGAAH,kBAAPO,CAAAA,OAAO,iDAAb,CAmDA,OAASV,aAAT,CAAwBU,OAAxB","sourcesContent":["import { GraphQLClient } from 'graphql-request';\n// import { RefreshUser } from './user';\n\n// const urls = {\n//   test: `https://graphql.dev.defencestation.ca`,\n//   development: import.meta.env.PUBLIC_API || 'http://localhost:3000/graphql',\n//   production: window?._env_?.GRAPH_API,\n// };\n\nconst graphQLClient = new GraphQLClient('https://graphql.dev.defencestation.ca/graphql');\n\n/**\n * @param promise A promise to resolve\n * @nthTry Number of tries before rejecting\n * @desc Retries a promise n no. of times before rejecting.\n * @returns resolved promise\n */\nasync function retryPromise(promise, nthTry) {\n  try {\n    // try to resolve the promise\n    const data = await promise;\n    // if resolved simply return the result back to the caller\n    return data;\n  } catch (e) {\n    // if the promise fails and we are down to 1 try we reject\n    if (nthTry === 1) {\n      return Promise.reject(e);\n    }\n    // if the promise fails and the current try is not equal to 1\n    // we call this function again from itself but this time\n    // we reduce the no. of tries by one\n    // so that eventually we reach to \"1 try left\" where we know we have to stop and reject\n    // console.log('retrying', nthTry, 'time');\n    // we return whatever is the result of calling the same function\n    return retryPromise(promise, nthTry - 1);\n  }\n}\n\n// Obtain the fresh token each time the function is called\nfunction getAccessToken() {\n  return localStorage.getItem('access-token');\n}\n\nconst request = async (query, variables, nthTry = 2) => {\n  // console.log(nthTry);\n  let requestHeaders = {};\n\n\n  // if (!import.meta.env.MODE || import.meta.env.MODE === 'development') {\n  if (getAccessToken()) {\n    requestHeaders = {\n      authorization: `${getAccessToken()}`,\n    };\n    // }\n  }\n\n  try {\n    const data = await graphQLClient.request(query, variables, requestHeaders);\n    return data;\n  } catch (error) {\n    if (nthTry !== 1) {\n      if (error?.response?.errors?.length > 0) {\n        if (\n          error?.response?.errors[0].extensions?.code === 'unauthenticated' &&\n          error?.response?.errors[0].message === 'jwt: exp claim is invalid'\n        ) {\n          // console.log(error?.response?.errors[0].extensions);\n\n          // const atk = localStorage.getItem('access-token');\n          // const rtk = localStorage.getItem('refresh-token');\n\n          try {\n            // if (\n            //   !import.meta.env.MODE ||\n            //   import.meta.env.MODE === 'development'\n            // ) {\n            // const newtokens = await RefreshUser(atk, rtk);\n            // localStorage.setItem('access-token', newtokens.data.atoken);\n            // localStorage.setItem('refresh-token', newtokens.data.rtoken);\n          } catch (e) {\n            // console.log(e);\n          }\n\n          // lets send a request to refresh the token\n        }\n\n        return request(query, variables, nthTry - 1);\n      }\n    }\n\n    throw error;\n  }\n};\n\nexport { graphQLClient, request };\n"]},"metadata":{},"sourceType":"module"}