{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gql = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;\n\nvar cross_fetch_1 = __importStar(require(\"cross-fetch\")),\n    CrossFetch = cross_fetch_1;\n\nvar printer_1 = require(\"graphql/language/printer\");\n\nvar createRequestBody_1 = __importDefault(require(\"./createRequestBody\"));\n\nvar types_1 = require(\"./types\");\n\nObject.defineProperty(exports, \"ClientError\", {\n  enumerable: true,\n  get: function get() {\n    return types_1.ClientError;\n  }\n});\n/**\n * Convert the given headers configuration into a plain object.\n */\n\nvar resolveHeaders = function resolveHeaders(headers) {\n  var oHeaders = {};\n\n  if (headers) {\n    if (typeof Headers !== 'undefined' && headers instanceof Headers || headers instanceof CrossFetch.Headers) {\n      oHeaders = HeadersInstanceToPlainObject(headers);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function (_a) {\n        var name = _a[0],\n            value = _a[1];\n        oHeaders[name] = value;\n      });\n    } else {\n      oHeaders = headers;\n    }\n  }\n\n  return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n *\n * @param {string} str GraphQL query\n * @returns {string} Cleaned query\n */\n\n\nvar queryCleanner = function queryCleanner(str) {\n  return str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim();\n};\n/**\n * Create query string for GraphQL request\n *\n * @param {object} param0 -\n *\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\n * @param {string|undefined} param0.operationName the GraphQL operation name\n * @param {any|any[]} param0.variables the GraphQL variables to use\n */\n\n\nvar buildGetQueryParams = function buildGetQueryParams(_a) {\n  var query = _a.query,\n      variables = _a.variables,\n      operationName = _a.operationName;\n\n  if (!Array.isArray(query)) {\n    var search = [\"query=\" + encodeURIComponent(queryCleanner(query))];\n\n    if (variables) {\n      search.push(\"variables=\" + encodeURIComponent(JSON.stringify(variables)));\n    }\n\n    if (operationName) {\n      search.push(\"operationName=\" + encodeURIComponent(operationName));\n    }\n\n    return search.join('&');\n  }\n\n  if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n    throw new Error('Cannot create query with given variable type, array expected');\n  } // Batch support\n\n\n  var payload = query.reduce(function (accu, currentQuery, index) {\n    accu.push({\n      query: queryCleanner(currentQuery),\n      variables: variables ? JSON.stringify(variables[index]) : undefined\n    });\n    return accu;\n  }, []);\n  return \"query=\" + encodeURIComponent(JSON.stringify(payload));\n};\n/**\n * Fetch data using POST method\n */\n\n\nvar post = function post(_a) {\n  var url = _a.url,\n      query = _a.query,\n      variables = _a.variables,\n      operationName = _a.operationName,\n      headers = _a.headers,\n      fetch = _a.fetch,\n      fetchOptions = _a.fetchOptions;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var body;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          body = createRequestBody_1.default(query, variables, operationName);\n          return [4\n          /*yield*/\n          , fetch(url, __assign({\n            method: 'POST',\n            headers: __assign(__assign({}, typeof body === 'string' ? {\n              'Content-Type': 'application/json'\n            } : {}), headers),\n            body: body\n          }, fetchOptions))];\n\n        case 1:\n          return [2\n          /*return*/\n          , _b.sent()];\n      }\n    });\n  });\n};\n/**\n * Fetch data using GET method\n */\n\n\nvar get = function get(_a) {\n  var url = _a.url,\n      query = _a.query,\n      variables = _a.variables,\n      operationName = _a.operationName,\n      headers = _a.headers,\n      fetch = _a.fetch,\n      fetchOptions = _a.fetchOptions;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var queryParams;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          queryParams = buildGetQueryParams({\n            query: query,\n            variables: variables,\n            operationName: operationName\n          });\n          return [4\n          /*yield*/\n          , fetch(url + \"?\" + queryParams, __assign({\n            method: 'GET',\n            headers: headers\n          }, fetchOptions))];\n\n        case 1:\n          return [2\n          /*return*/\n          , _b.sent()];\n      }\n    });\n  });\n};\n/**\n * todo\n */\n\n\nvar GraphQLClient =\n/** @class */\nfunction () {\n  function GraphQLClient(url, options) {\n    this.url = url;\n    this.options = options || {};\n  }\n\n  GraphQLClient.prototype.rawRequest = function (query, variables, requestHeaders) {\n    var _a = this.options,\n        headers = _a.headers,\n        _b = _a.fetch,\n        fetch = _b === void 0 ? cross_fetch_1.default : _b,\n        _c = _a.method,\n        method = _c === void 0 ? 'POST' : _c,\n        fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n\n    var url = this.url;\n    return makeRequest({\n      url: url,\n      query: query,\n      variables: variables,\n      headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestHeaders)),\n      operationName: undefined,\n      fetch: fetch,\n      method: method,\n      fetchOptions: fetchOptions\n    });\n  };\n  /**\n   * Send a GraphQL document to the server.\n   */\n\n\n  GraphQLClient.prototype.request = function (document, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, headers, _b, fetch, _c, method, fetchOptions, url, _d, query, operationName, data;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n            url = this.url;\n            _d = resolveRequestDocument(document), query = _d.query, operationName = _d.operationName;\n            return [4\n            /*yield*/\n            , makeRequest({\n              url: url,\n              query: query,\n              variables: variables,\n              headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestHeaders)),\n              operationName: operationName,\n              fetch: fetch,\n              method: method,\n              fetchOptions: fetchOptions\n            })];\n\n          case 1:\n            data = _e.sent().data;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * Send a GraphQL document to the server.\n   */\n\n\n  GraphQLClient.prototype.batchRequests = function (documents, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, headers, _b, fetch, _c, method, fetchOptions, url, queries, variables, data;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n            url = this.url;\n            queries = documents.map(function (_a) {\n              var document = _a.document;\n              return resolveRequestDocument(document).query;\n            });\n            variables = documents.map(function (_a) {\n              var variables = _a.variables;\n              return variables;\n            });\n            return [4\n            /*yield*/\n            , makeRequest({\n              url: url,\n              query: queries,\n              variables: variables,\n              headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestHeaders)),\n              operationName: undefined,\n              fetch: fetch,\n              method: method,\n              fetchOptions: fetchOptions\n            })];\n\n          case 1:\n            data = _d.sent().data;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n\n  GraphQLClient.prototype.setHeaders = function (headers) {\n    this.options.headers = headers;\n    return this;\n  };\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n\n\n  GraphQLClient.prototype.setHeader = function (key, value) {\n    var _a;\n\n    var headers = this.options.headers;\n\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-ignore\n      headers[key] = value;\n    } else {\n      this.options.headers = (_a = {}, _a[key] = value, _a);\n    }\n\n    return this;\n  };\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n\n\n  GraphQLClient.prototype.setEndpoint = function (value) {\n    this.url = value;\n    return this;\n  };\n\n  return GraphQLClient;\n}();\n\nexports.GraphQLClient = GraphQLClient;\n\nfunction makeRequest(_a) {\n  var url = _a.url,\n      query = _a.query,\n      variables = _a.variables,\n      headers = _a.headers,\n      operationName = _a.operationName,\n      fetch = _a.fetch,\n      _b = _a.method,\n      method = _b === void 0 ? 'POST' : _b,\n      fetchOptions = _a.fetchOptions;\n  return __awaiter(this, void 0, void 0, function () {\n    var fetcher, isBathchingQuery, response, result, successfullyReceivedData, headers_1, status_1, errorResult;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          fetcher = method.toUpperCase() === 'POST' ? post : get;\n          isBathchingQuery = Array.isArray(query);\n          return [4\n          /*yield*/\n          , fetcher({\n            url: url,\n            query: query,\n            variables: variables,\n            operationName: operationName,\n            headers: headers,\n            fetch: fetch,\n            fetchOptions: fetchOptions\n          })];\n\n        case 1:\n          response = _c.sent();\n          return [4\n          /*yield*/\n          , getResult(response)];\n\n        case 2:\n          result = _c.sent();\n          successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function (_a) {\n            var data = _a.data;\n            return !data;\n          }) : !!result.data;\n\n          if (response.ok && !result.errors && successfullyReceivedData) {\n            headers_1 = response.headers, status_1 = response.status;\n            return [2\n            /*return*/\n            , __assign(__assign({}, isBathchingQuery ? {\n              data: result\n            } : result), {\n              headers: headers_1,\n              status: status_1\n            })];\n          } else {\n            errorResult = typeof result === 'string' ? {\n              error: result\n            } : result;\n            throw new types_1.ClientError(__assign(__assign({}, errorResult), {\n              status: response.status,\n              headers: response.headers\n            }), {\n              query: query,\n              variables: variables\n            });\n          }\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\n * todo\n */\n\n\nfunction rawRequest(url, query, variables, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var client;\n    return __generator(this, function (_a) {\n      client = new GraphQLClient(url);\n      return [2\n      /*return*/\n      , client.rawRequest(query, variables, requestHeaders)];\n    });\n  });\n}\n\nexports.rawRequest = rawRequest;\n/**\n * Send a GraphQL Document to the GraphQL server for exectuion.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await request('https://foo.bar/graphql', `\n *   {\n *     query {\n *       users\n *     }\n *   }\n * `)\n *\n * // You can also pass a GraphQL DocumentNode. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * // If you don't actually care about using DocumentNode but just\n * // want the tooling support for gql template tag like IDE syntax\n * // coloring and prettier autoformat then note you can use the\n * // passthrough gql tag shipped with graphql-request to save a bit\n * // of performance and not have to install another dep into your project.\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n */\n\nfunction request(url, document, variables, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var client;\n    return __generator(this, function (_a) {\n      client = new GraphQLClient(url);\n      return [2\n      /*return*/\n      , client.request(document, variables, requestHeaders)];\n    });\n  });\n}\n\nexports.request = request;\n/**\n * Send a batch of GraphQL Document to the GraphQL server for exectuion.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\n\nfunction batchRequests(url, documents, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var client;\n    return __generator(this, function (_a) {\n      client = new GraphQLClient(url);\n      return [2\n      /*return*/\n      , client.batchRequests(documents, requestHeaders)];\n    });\n  });\n}\n\nexports.batchRequests = batchRequests;\nexports.default = request;\n/**\n * todo\n */\n\nfunction getResult(response) {\n  var contentType = response.headers.get('Content-Type');\n\n  if (contentType && contentType.startsWith('application/json')) {\n    return response.json();\n  } else {\n    return response.text();\n  }\n}\n/**\n * helpers\n */\n\n\nfunction resolveRequestDocument(document) {\n  var _a;\n\n  if (typeof document === 'string') return {\n    query: document\n  };\n  var operationName = undefined;\n  var operationDefinitions = document.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  });\n\n  if (operationDefinitions.length === 1) {\n    operationName = (_a = operationDefinitions[0].name) === null || _a === void 0 ? void 0 : _a.value;\n  }\n\n  return {\n    query: printer_1.print(document),\n    operationName: operationName\n  };\n}\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\n\n\nfunction gql(chunks) {\n  var variables = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    variables[_i - 1] = arguments[_i];\n  }\n\n  return chunks.reduce(function (accumulator, chunk, index) {\n    return \"\" + accumulator + chunk + (index in variables ? variables[index] : '');\n  }, '');\n}\n\nexports.gql = gql;\n/**\n * Convert Headers instance into regular object\n */\n\nfunction HeadersInstanceToPlainObject(headers) {\n  var o = {};\n  headers.forEach(function (v, k) {\n    o[k] = v;\n  });\n  return o;\n}","map":null,"metadata":{},"sourceType":"script"}